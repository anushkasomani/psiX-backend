"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarkPoseidonHasher = void 0;
const mmr_core_1 = require("@herodotus_dev/mmr-core");
const micro_starknet_1 = require("micro-starknet");
class StarkPoseidonHasher extends mmr_core_1.IHasher {
    constructor() {
        super({ blockSizeBits: 252 });
    }
    hash(data) {
        if (data.length !== 2)
            throw new Error("Stark Poseidon Hasher only accepts two elements");
        const sizeErrorIndex = data.findIndex((e) => this.isElementSizeValid(e) === false);
        if (sizeErrorIndex > -1)
            throw new Error(`Stark Poseidon Hasher only accepts elements of size ${this.options.blockSizeBits} bits. Got ${JSON.stringify(mmr_core_1.IHasher.byteSize(data[sizeErrorIndex]))}`);
        return "0x" + (0, micro_starknet_1.poseidonHash)(BigInt(data[0]), BigInt(data[1])).toString(16);
    }
}
exports.StarkPoseidonHasher = StarkPoseidonHasher;
//# sourceMappingURL=stark-poseidon-hasher.js.map