"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrecomputeInStoreTable = exports.PrecomputationMMR = void 0;
const _1 = require(".");
const trees_database_1 = require("./trees-database");
class PrecomputationMMR extends _1.default {
    parentEndIdx;
    constructor(store, hasher, parentMmrUuid, elementsCount, mmrUuid) {
        super(store, hasher, mmrUuid);
        this.hashes = new PrecomputeInStoreTable(store, `${this.mmrUuid}:hashes:`, `${parentMmrUuid}:hashes:`, elementsCount);
        this.parentEndIdx = elementsCount;
    }
    static async initialize(store, hasher, parentMmrUuid, mmrUuid) {
        const parentMmr = new _1.default(store, hasher, parentMmrUuid);
        const elementsCount = await parentMmr.elementsCount.get();
        const leavesCount = await parentMmr.leavesCount.get();
        const rootHash = await parentMmr.rootHash.get();
        const precomputationMMR = new PrecomputationMMR(store, hasher, parentMmrUuid, elementsCount, mmrUuid);
        await precomputationMMR.elementsCount.set(elementsCount);
        await precomputationMMR.leavesCount.set(leavesCount);
        if (rootHash)
            await precomputationMMR.rootHash.set(rootHash);
        return precomputationMMR;
    }
    async close() {
        await this.clear();
    }
    async clear() {
        const toDelete = [this.elementsCount.key, this.rootHash.key, this.leavesCount.key];
        const elementsCount = await this.elementsCount.get();
        const hashes = Array.from({ length: elementsCount - this.parentEndIdx }, (_, i) => i + this.parentEndIdx + 1).map((idx) => this.hashes.getFullKey(idx));
        return this.store.deleteMany(toDelete.concat(hashes));
    }
}
exports.PrecomputationMMR = PrecomputationMMR;
class PrecomputeInStoreTable extends trees_database_1.InStoreTable {
    parentKey;
    parentEndIdx;
    constructor(store, key, parentKey, parentEndIdx) {
        super(store, key);
        this.parentKey = parentKey;
        this.parentEndIdx = parentEndIdx;
    }
    getFullKey(idx) {
        return idx > this.parentEndIdx
            ? this.key + (idx ?? "").toString() || ""
            : this.parentKey + (idx ?? "").toString() || "";
    }
}
exports.PrecomputeInStoreTable = PrecomputeInStoreTable;
//# sourceMappingURL=precomputation.js.map