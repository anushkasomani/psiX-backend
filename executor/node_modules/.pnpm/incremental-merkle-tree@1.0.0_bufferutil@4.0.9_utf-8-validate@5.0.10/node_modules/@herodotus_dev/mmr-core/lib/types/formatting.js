"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatProof = exports.formatPeaks = exports.validateFormattingOptions = void 0;
function validateFormattingOptions(options) {
    if (!options.nullValue.startsWith("0x")) {
        throw new Error("Formatting options: nullValue must be a hex string");
    }
    if (Number.isNaN(parseInt(options.nullValue, 16))) {
        throw new Error("Formatting options: nullValue must be a hex string");
    }
}
exports.validateFormattingOptions = validateFormattingOptions;
function formatPeaks(peaks, formattingOpts) {
    if (peaks.length > formattingOpts.outputSize) {
        throw new Error("Formatting: Expected peaks output size is smaller than the actual size");
    }
    const expectedPeaksSizeRemainder = formattingOpts.outputSize - peaks.length;
    const peaksNullValues = Array(expectedPeaksSizeRemainder).fill(formattingOpts.nullValue);
    return peaks.concat(peaksNullValues);
}
exports.formatPeaks = formatPeaks;
function formatProof(siblingsHashes, formattingOpts) {
    if (siblingsHashes.length > formattingOpts.outputSize) {
        throw new Error("Formatting: Expected proof output size is smaller than the actual size");
    }
    const expectedProofSizeRemainder = formattingOpts.outputSize - siblingsHashes.length;
    const proofNullValues = Array(expectedProofSizeRemainder).fill(formattingOpts.nullValue);
    return siblingsHashes.concat(proofNullValues);
}
exports.formatProof = formatProof;
//# sourceMappingURL=formatting.js.map