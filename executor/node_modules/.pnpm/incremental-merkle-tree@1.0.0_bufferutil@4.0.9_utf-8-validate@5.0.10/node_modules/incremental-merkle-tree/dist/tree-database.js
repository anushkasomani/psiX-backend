"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InStoreCounter = exports.InStoreTable = exports.TreeDatabase = void 0;
const mmr_core_1 = require("@herodotus_dev/mmr-core");
const uuid_1 = require("uuid");
class TreeDatabase {
    store;
    treeUuid;
    nodes;
    rootHash;
    constructor(store, treeUuid) {
        this.store = store;
        treeUuid ? (this.treeUuid = treeUuid) : (this.treeUuid = (0, uuid_1.v4)());
        this.rootHash = new InStoreTable(this.store, `${this.treeUuid}:${mmr_core_1.TREE_METADATA_KEYS.ROOT_HASH}`);
        this.nodes = new InStoreTable(this.store, `${this.treeUuid}:nodes:`);
    }
}
exports.TreeDatabase = TreeDatabase;
class InStoreTable {
    store;
    key;
    constructor(store, key) {
        this.store = store;
        this.key = key;
    }
    getFullKey(suffix) {
        return this.key + (suffix ?? "").toString() || "";
    }
    async get(suffix) {
        return this.store.get(this.getFullKey(suffix));
    }
    async getMany(suffixes) {
        const keys = suffixes.map((suffix) => this.getFullKey(suffix));
        return this.store.getMany(keys);
    }
    async set(value, suffix) {
        return this.store.set(this.getFullKey(suffix), value);
    }
    async setMany(entries) {
        const storeEntries = new Map();
        for (const key in entries) {
            storeEntries.set(this.getFullKey(key), entries[key]);
        }
        return this.store.setMany(storeEntries);
    }
}
exports.InStoreTable = InStoreTable;
class InStoreCounter {
    store;
    key;
    constructor(store, key) {
        this.store = store;
        this.key = key;
    }
    async get() {
        const count = await this.store.get(this.key);
        return count ? parseInt(count) : 0;
    }
    async set(count) {
        if (isNaN(count))
            throw new Error("Count is not a number");
        await this.store.set(this.key, count.toString());
    }
    async increment() {
        const count = await this.get();
        const newCount = count + 1;
        await this.set(newCount);
        return newCount;
    }
}
exports.InStoreCounter = InStoreCounter;
//# sourceMappingURL=tree-database.js.map