"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoseidonHasher = void 0;
const mmr_core_1 = require("@herodotus_dev/mmr-core");
const buildPoseidon = require("circomlibjs").buildPoseidon;
class PoseidonHasher extends mmr_core_1.IHasher {
    poseidon;
    constructor() {
        super({ blockSizeBits: 254 });
    }
    static async create() {
        const hasher = new PoseidonHasher();
        hasher.poseidon = await buildPoseidon();
        return hasher;
    }
    hash(data) {
        const sizeErrorIndex = data.findIndex((e) => this.isElementSizeValid(e) === false);
        if (sizeErrorIndex > -1)
            throw new Error(`Poseidon Hasher only accepts elements of size ${this.options.blockSizeBits} bits. Got ${JSON.stringify(mmr_core_1.IHasher.byteSize(data[sizeErrorIndex]))}`);
        return '0x' + BigInt(this.poseidon.F.toString(this.poseidon(data))).toString(16);
    }
}
exports.PoseidonHasher = PoseidonHasher;
//# sourceMappingURL=poseidon-hasher.js.map