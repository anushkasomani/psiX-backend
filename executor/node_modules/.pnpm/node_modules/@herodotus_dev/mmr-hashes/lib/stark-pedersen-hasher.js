"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarkPedersenHasher = void 0;
const mmr_core_1 = require("@herodotus_dev/mmr-core");
const pedersen_wasm_1 = require("./pedersen/pedersen_wasm");
class StarkPedersenHasher extends mmr_core_1.IHasher {
    constructor() {
        super({ blockSizeBits: 252 });
    }
    hash(data) {
        if (data.length !== 2)
            throw new Error("Stark Pedersen Hasher only accepts two elements");
        if (data.some((e) => typeof e !== "string"))
            throw new Error(`Stark Pedersen Hasher does not accept elements that are not string. Got ${JSON.stringify(data)}`);
        const sizeErrorIndex = data.findIndex((e) => this.isElementSizeValid(e) === false);
        if (sizeErrorIndex > -1)
            throw new Error(`Stark Pedersen Hasher only accepts elements of size ${this.options.blockSizeBits} bits. Got ${JSON.stringify(mmr_core_1.IHasher.byteSize(data[sizeErrorIndex]))}`);
        return (0, pedersen_wasm_1.pedersen)(data[0], data[1]);
    }
}
exports.StarkPedersenHasher = StarkPedersenHasher;
//# sourceMappingURL=stark-pedersen-hasher.js.map