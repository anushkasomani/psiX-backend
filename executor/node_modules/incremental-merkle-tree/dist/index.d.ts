import { HexString, IHasher, IStore } from "@herodotus_dev/mmr-core";
import { TreeDatabase } from "./tree-database";
type InclusionProof = string[];
type InclusionMultiProof = string[][];
export declare class IncrementalMerkleTree extends TreeDatabase {
    readonly size: number;
    private readonly nullValue;
    private readonly hasher;
    private constructor();
    static initialize(size: number, nullValue: HexString, hasher: IHasher, store: IStore, treeUuid?: string): Promise<IncrementalMerkleTree>;
    getRoot(): Promise<string>;
    getInclusionMultiProof(indexesToProve: number[]): Promise<InclusionMultiProof>;
    verifyMultiProof(indexes: number[], values: HexString[], proof: InclusionMultiProof): Promise<boolean>;
    private calculateMultiproofRootHash;
    getInclusionProof(index: number): Promise<InclusionProof>;
    verifyProof(index: number, value: HexString, proof: InclusionProof): Promise<boolean>;
    update(index: number, oldValue: HexString, newValue: HexString, proof: InclusionProof): Promise<string>;
    private getTreeDepth;
    private renderEmptyTree;
}
export {};
